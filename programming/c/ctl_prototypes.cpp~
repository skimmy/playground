#include <utility>
#include <iostream>
#include <fstream>
#include <iterator>
#include <vector>


// Readsa a fasta file
// Notes:
//   _StreamT must provide eof() method as in istream
//   _StreamT must have a getline() defined in std::getline
template <typename _StreamT>
std::pair<std::string, std::string>
read_fasta(_StreamT& is)
{
  std::string header { "" };
  std::string genome { "" };

  if (is) {
    std::getline(is, header);
  }

  while(is) {
    std::string tmp { "" };
    std::getline(is, tmp);
    genome.append(tmp);
  }

  return std::make_pair(std::move(header), std::move(genome));
}

template<>
std::pair<std::string, std::string>
read_fasta(std::string& path) {
  std::ifstream is(path);
  auto pp = read_fasta(is);
  is.close();
  return pp;
}

template <typename _IterT, typename IntType = size_t>
class circular_iterator
  : public std::iterator<std::random_access_iterator_tag,
			 typename std::iterator_traits<_IterT>::value_type,
			 typename std::iterator_traits<_IterT>::difference_type,
			 typename std::iterator_traits<_IterT>::pointer,
			 typename std::iterator_traits<_IterT>::reference>
{
private:
  _IterT  _b;
  IntType _n;
  IntType _curr;
public:
  circular_iterator(_IterT b, IntType n)
    : _b { b }, _n { n }, _curr { 0 } {}

  circular_iterator operator+(IntType k)
  {
    circular_iterator tmp(_b, _n);
    tmp._curr += (_curr + k) % _n;
    return tmp;
  }

  circular_iterator operator++()
    { _curr = (_curr + 1) % _n; return *this; } 

  typename std::iterator_traits<_IterT>::value_type& operator*()
    { return *(_b + _curr); }
};

template <typename _IterT, typename IntType>
circular_iterator<_IterT, IntType>
make_circular_iterator(_IterT it, IntType n)
{
  return circular_iterator<_IterT, IntType>(it, n);
}

int
main(int argc, char** argv)
{
  std::ifstream is("/Users/skimmy/Temporary/fake.fasta");
  auto fasta = read_fasta(is);
  is.close();
  std::cout << fasta.first << "\n" << fasta.second << "\n\n";
  std::string path {"/Users/skimmy/Temporary/fake.fasta"};
  auto f2 = read_fasta(path);
  std::cout << f2.first << "\n";

  std::vector<int> v = { 1, 2, 3};
  auto ci = make_circular_iterator(v.begin(), v.size());
  ++ci;
  std::cout << *(ci + 2) << "\n";
  auto cc = make_circular_iterator(v.rbegin(), v.size());
  for (int i=10; i >0; --i, ++cc) {
    std::cout << *cc << "\t";

  }
  std::cout << "\n";
  return 0;
}
